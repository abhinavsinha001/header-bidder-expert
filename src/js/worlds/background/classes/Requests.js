'use strict';

import $ from 'jquery';
import {responseTypes as rt} from '../../../definitions/constants';

/**
 * Observer of the requests made by the browser
 */
export default class Requests {
    constructor(callsInfo, chromeWebRequest) {
        this._callsInfo = callsInfo;
        this._chromeWebRequest = chromeWebRequest;
    }

    /**
     * Constants for events generated by this class
     */
    static get EV_CALL_START() {
        return 'call_start';
    }
    static get EV_CALL_END() {
        return 'call_end';
    }

    /**
     * Start this object
     */
    run() {
        this._listenRequests();
    }

    /**
     * Listen to the requests made by the browser
     */
    _listenRequests() {
        const filter = {urls: this._composeListenUrlPatterns()};

        this._chromeWebRequest
            .onBeforeRequest.addListener(this._onBeforeRequest.bind(this), filter);
        this._chromeWebRequest
            .onErrorOccurred.addListener(this._onErrorOccurred.bind(this), filter);
        this._chromeWebRequest
            .onCompleted.addListener(this._onCompleted.bind(this), filter);
    }

    /**
     * Go through the config for calls and return the filter for urls that we'd like to listen to
     */
    _composeListenUrlPatterns() {
        let result = [];

        this._callsInfo.getPreparedCallsConfig()
            .forEach(callConfig => {
                result = result.concat(callConfig.listen);
            });

        return result;
    }

    /**
     * Gather information about the request in a structure.
     * type can be 'start', 'end' or 'error'.
     */
    _createCallInfo(details, type) {
        const sysInfo = this._callsInfo.findSystem(details.url);
        if (!sysInfo) {
            return null;
        }

        const result = {
            tabId:      details.tabId,
            callId:     details.requestId,
            sysId:      sysInfo.sysId,
            sysType:    sysInfo.sysType,
            url:        details.url,
            tsm:        Math.floor(details.timeStamp),
            resType:    null, // For completed requests - ok/failed
            statusCode: null, // For completed requests - http status code
            isFake:     false,
        };

        // If the request has finished - add the result properties
        if (type === 'end') {
            result.statusCode = details.statusCode;
            result.resType = this._getResTypeForStatusCode(result.statusCode);

            // Signal about fake completed events - see https://bugs.chromium.org/p/chromium/issues/detail?id=477685#c20
            let statusLine = String(details.statusLine);
            statusLine = statusLine.toLowerCase();
            result.isFake = (details.statusCode == 400) && (statusLine.indexOf('service worker') >= 0);
        } else if (type === 'error') {
            result.resType = rt.ERROR;
        }

        // Result
        return result;
    }

    /**
     * Return response type depending on response status code
     */
    _getResTypeForStatusCode(statusCode) {
        if ((statusCode >= 100) && (statusCode <= 299)) {
            return rt.SUCCESS;
        } else if ((statusCode >= 300) && (statusCode <= 399)) {
            return rt.REDIRECT;
        }

        return rt.ERROR;
    }

    /**
     * An HB request is starting
     */
    _onBeforeRequest(details) {
        if ((details.tabId < 0) || (details.method === 'OPTIONS')) {
            return;
        }

        const callInfo = this._createCallInfo(details, 'start');
        if (!callInfo) {
            return;
        }

        $(this).trigger(Requests.EV_CALL_START, callInfo);
    }

    /**
     * An HB request has completed
     */
    _onCompleted(details) {
        if ((details.tabId < 0) || (details.method === 'OPTIONS')) {
            return;
        }

        const callInfo = this._createCallInfo(details, 'end');
        if (!callInfo) {
            return;
        }

        $(this).trigger(Requests.EV_CALL_END, callInfo);
    }

    /**
     * An HB request has failed
     */
    _onErrorOccurred(details) {
        if ((details.tabId < 0) || (details.method === 'OPTIONS')) {
            return;
        }

        const callInfo = this._createCallInfo(details, 'error');
        if (!callInfo) {
            return;
        }

        $(this).trigger(Requests.EV_CALL_END, callInfo);
    }
};
